// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/vault/vault.proto

package vault

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaultService_GetVaultItems_FullMethodName     = "/v1.vault.VaultService/GetVaultItems"
	VaultService_SaveLoginPassword_FullMethodName = "/v1.vault.VaultService/SaveLoginPassword"
	VaultService_SaveTextData_FullMethodName      = "/v1.vault.VaultService/SaveTextData"
	VaultService_SaveBinaryData_FullMethodName    = "/v1.vault.VaultService/SaveBinaryData"
	VaultService_SaveCardData_FullMethodName      = "/v1.vault.VaultService/SaveCardData"
	VaultService_SaveMeta_FullMethodName          = "/v1.vault.VaultService/SaveMeta"
	VaultService_DeleteVaultItem_FullMethodName   = "/v1.vault.VaultService/DeleteVaultItem"
)

// VaultServiceClient is the client API for VaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VaultService service definition
type VaultServiceClient interface {
	GetVaultItems(ctx context.Context, in *GetVaultItemsRequest, opts ...grpc.CallOption) (*GetVaultItemsResponse, error)
	SaveLoginPassword(ctx context.Context, in *SaveLoginPasswordRequest, opts ...grpc.CallOption) (*SaveLoginPasswordResponse, error)
	SaveTextData(ctx context.Context, in *SaveTextDataRequest, opts ...grpc.CallOption) (*SaveTextDataResponse, error)
	SaveBinaryData(ctx context.Context, in *SaveBinaryDataRequest, opts ...grpc.CallOption) (*SaveBinaryDataResponse, error)
	SaveCardData(ctx context.Context, in *SaveCardDataRequest, opts ...grpc.CallOption) (*SaveCardDataResponse, error)
	SaveMeta(ctx context.Context, in *SaveMetaRequest, opts ...grpc.CallOption) (*SaveMetaResponse, error)
	DeleteVaultItem(ctx context.Context, in *DeleteVaultItemRequest, opts ...grpc.CallOption) (*DeleteVaultItemResponse, error)
}

type vaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultServiceClient(cc grpc.ClientConnInterface) VaultServiceClient {
	return &vaultServiceClient{cc}
}

func (c *vaultServiceClient) GetVaultItems(ctx context.Context, in *GetVaultItemsRequest, opts ...grpc.CallOption) (*GetVaultItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVaultItemsResponse)
	err := c.cc.Invoke(ctx, VaultService_GetVaultItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) SaveLoginPassword(ctx context.Context, in *SaveLoginPasswordRequest, opts ...grpc.CallOption) (*SaveLoginPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLoginPasswordResponse)
	err := c.cc.Invoke(ctx, VaultService_SaveLoginPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) SaveTextData(ctx context.Context, in *SaveTextDataRequest, opts ...grpc.CallOption) (*SaveTextDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTextDataResponse)
	err := c.cc.Invoke(ctx, VaultService_SaveTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) SaveBinaryData(ctx context.Context, in *SaveBinaryDataRequest, opts ...grpc.CallOption) (*SaveBinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveBinaryDataResponse)
	err := c.cc.Invoke(ctx, VaultService_SaveBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) SaveCardData(ctx context.Context, in *SaveCardDataRequest, opts ...grpc.CallOption) (*SaveCardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveCardDataResponse)
	err := c.cc.Invoke(ctx, VaultService_SaveCardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) SaveMeta(ctx context.Context, in *SaveMetaRequest, opts ...grpc.CallOption) (*SaveMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveMetaResponse)
	err := c.cc.Invoke(ctx, VaultService_SaveMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) DeleteVaultItem(ctx context.Context, in *DeleteVaultItemRequest, opts ...grpc.CallOption) (*DeleteVaultItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVaultItemResponse)
	err := c.cc.Invoke(ctx, VaultService_DeleteVaultItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServiceServer is the server API for VaultService service.
// All implementations must embed UnimplementedVaultServiceServer
// for forward compatibility.
//
// VaultService service definition
type VaultServiceServer interface {
	GetVaultItems(context.Context, *GetVaultItemsRequest) (*GetVaultItemsResponse, error)
	SaveLoginPassword(context.Context, *SaveLoginPasswordRequest) (*SaveLoginPasswordResponse, error)
	SaveTextData(context.Context, *SaveTextDataRequest) (*SaveTextDataResponse, error)
	SaveBinaryData(context.Context, *SaveBinaryDataRequest) (*SaveBinaryDataResponse, error)
	SaveCardData(context.Context, *SaveCardDataRequest) (*SaveCardDataResponse, error)
	SaveMeta(context.Context, *SaveMetaRequest) (*SaveMetaResponse, error)
	DeleteVaultItem(context.Context, *DeleteVaultItemRequest) (*DeleteVaultItemResponse, error)
	mustEmbedUnimplementedVaultServiceServer()
}

// UnimplementedVaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultServiceServer struct{}

func (UnimplementedVaultServiceServer) GetVaultItems(context.Context, *GetVaultItemsRequest) (*GetVaultItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaultItems not implemented")
}
func (UnimplementedVaultServiceServer) SaveLoginPassword(context.Context, *SaveLoginPasswordRequest) (*SaveLoginPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginPassword not implemented")
}
func (UnimplementedVaultServiceServer) SaveTextData(context.Context, *SaveTextDataRequest) (*SaveTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTextData not implemented")
}
func (UnimplementedVaultServiceServer) SaveBinaryData(context.Context, *SaveBinaryDataRequest) (*SaveBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBinaryData not implemented")
}
func (UnimplementedVaultServiceServer) SaveCardData(context.Context, *SaveCardDataRequest) (*SaveCardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCardData not implemented")
}
func (UnimplementedVaultServiceServer) SaveMeta(context.Context, *SaveMetaRequest) (*SaveMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMeta not implemented")
}
func (UnimplementedVaultServiceServer) DeleteVaultItem(context.Context, *DeleteVaultItemRequest) (*DeleteVaultItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaultItem not implemented")
}
func (UnimplementedVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {}
func (UnimplementedVaultServiceServer) testEmbeddedByValue()                      {}

// UnsafeVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServiceServer will
// result in compilation errors.
type UnsafeVaultServiceServer interface {
	mustEmbedUnimplementedVaultServiceServer()
}

func RegisterVaultServiceServer(s grpc.ServiceRegistrar, srv VaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedVaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultService_ServiceDesc, srv)
}

func _VaultService_GetVaultItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetVaultItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetVaultItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetVaultItems(ctx, req.(*GetVaultItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_SaveLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLoginPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).SaveLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_SaveLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).SaveLoginPassword(ctx, req.(*SaveLoginPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_SaveTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).SaveTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_SaveTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).SaveTextData(ctx, req.(*SaveTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_SaveBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).SaveBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_SaveBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).SaveBinaryData(ctx, req.(*SaveBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_SaveCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).SaveCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_SaveCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).SaveCardData(ctx, req.(*SaveCardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_SaveMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).SaveMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_SaveMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).SaveMeta(ctx, req.(*SaveMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_DeleteVaultItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVaultItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).DeleteVaultItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_DeleteVaultItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).DeleteVaultItem(ctx, req.(*DeleteVaultItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultService_ServiceDesc is the grpc.ServiceDesc for VaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.vault.VaultService",
	HandlerType: (*VaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVaultItems",
			Handler:    _VaultService_GetVaultItems_Handler,
		},
		{
			MethodName: "SaveLoginPassword",
			Handler:    _VaultService_SaveLoginPassword_Handler,
		},
		{
			MethodName: "SaveTextData",
			Handler:    _VaultService_SaveTextData_Handler,
		},
		{
			MethodName: "SaveBinaryData",
			Handler:    _VaultService_SaveBinaryData_Handler,
		},
		{
			MethodName: "SaveCardData",
			Handler:    _VaultService_SaveCardData_Handler,
		},
		{
			MethodName: "SaveMeta",
			Handler:    _VaultService_SaveMeta_Handler,
		},
		{
			MethodName: "DeleteVaultItem",
			Handler:    _VaultService_DeleteVaultItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/vault/vault.proto",
}
